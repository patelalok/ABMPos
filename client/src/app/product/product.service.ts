import { Injectable } from '@angular/core';
import { Http, Response, Headers } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { FormControl } from '@angular/forms/forms';
import { Category, Brand, Vendor, Model, ProductVariantDetail, CategoryTest,ProductInventory } from 'app/product/product.component';
import { environment } from 'environments/environment';
import { Observer, ReplaySubject } from 'rxjs';
import { Product, TransactionLineItemDaoList } from 'app/sell/sale/sale.component';


@Injectable()
export class ProductService {
  private url: string; 
  private fullProductList: Product[];
  private dataObs$ = new ReplaySubject(1);

  testData: string;

  constructor(private http: Http) {
    this.url = environment.reportUrl; 

   }

  getProductDetails(): Observable<Product[]> {
    // if(!this.fullProductList){
      return this.http.get(this.url+'/getProductTableDetails')
        .map(this.extractData)
        .map((list) => {
          console.log('Caching product list...');
          this.fullProductList = list;
          return this.fullProductList;
        })
        .catch(this.handleError);
    // }
    // else{
    //   return Observable.create((observer: Observer<any>) => {
    //     console.log('Returning cached product list');
    //     observer.next(this.fullProductList);
    //     observer.complete();  
    //   }); 
    // }
  }

  getProductDetailsUsingCache(){
    if(!this.dataObs$.observers.length)
    this.http.get(this.url+'/getProductTableDetails')
    .subscribe(
      (data:any) => this.dataObs$.next(data._body),
      error => {
        this.dataObs$.error(error);
        // Recreate the Observable as after Error we cannot emit data anymore
        this.dataObs$ = new ReplaySubject(1);
    }
    );

    // this.dataObs$
    // .subscribe(test =>{
    //   console.log('test', test)
    // })

    console.log('cached product response', this.dataObs$);
    return this.dataObs$;

  }

  getProductInventoryByProductNo(productNo: string) : Observable<ProductInventory[]>{
   return this.http.get(this.url+'/getProductInventory?productNo='+productNo)
   .map(this.extractData)
   .catch(this.handleError);
  }

  getCategoryDetails(): Observable<Category[]> {
    return this.http.get(this.url+'/getCategory')
      .map(this.extractData)
      .catch(this.handleError);
  }
  getProductDetailsById(productNo: string): Observable<Product> {
    let url = this.url+`/getProductById?productNo=${productNo}`;
    return this.http.get(url)
      .map(this.extractData)
      .catch(this.handleError);
  }

  getBrandDetails(): Observable<Brand[]> {
    return this.http.get(this.url+'/getBrand')
      .map(this.extractData)
      .catch(this.handleError);
  }

  getVendorDetails(): Observable<Vendor[]> {
    return this.http.get(this.url+'/getVendor')
      .map(this.extractData)
      .catch(this.handleError);
  }

  getModelDetails(): Observable<Model[]> {
    return this.http.get(this.url+'/getModel')
      .map(this.extractData)
      .catch(this.handleError);
  }

  getProductVariantDetails(): Observable<ProductVariantDetail[]> {
    return this.http.get(this.url+'/getProductVariantDetails')
      .map(this.extractData)
      .catch(this.handleError);
  }

  getProductVariantDetailsByName(name: string): Observable<ProductVariantDetail[]> {
    return this.http.get(this.url+'/getProductVariantDetailsByName?variantName=' + name)
      .map(this.extractData)
      .catch(this.handleError);
  }

  getAutoGeneratedBarcode(): Observable<string> {
    return this.http.get(this.url+'/getAutoGeneratedProductNo')
      .map(res => res.text())
      .catch(this.handleError);
  }

  getProductHistory(productNo: string, timeDuration: string): Observable<TransactionLineItemDaoList[]> {
    return this.http.get(this.url+'getProductHistory?productNo=' + productNo + '&timeDuration=' + timeDuration)
      .map(this.extractData)
      .catch(this.handleError);
  }

  addProduct(product: Product) {
    console.log("Product Added", product.description);
    return this.http.post(this.url+'/addProduct', product)
      .map((product: any) => {
        console.log('Adding product'); 
        if(this.fullProductList){
          this.fullProductList.push(product);
          //Sorting logic here 

          this.fullProductList = this.fullProductList.slice(); 

          return this.fullProductList; 
        }
      });
  }

  // TODO:  This is redudant, but need to do it cause i have two obejct for backend dto and product, i need to fix this.
  // editProduct(product: BackendProductDto) {
  //   console.log("Product Added", product.description);
  //   this.http.post(this.url+'/addProduct', product)
      // .subscribe(data => {
      //   alert('ok');
      //   console.log(data);
      // },
      // error => {
      //   console.log(JSON.stringify(error.json()));
      // });
  //     .map((updatedProduct: any) => {
  //       let index = this.fullProductList.findIndex((product) => {
  //         return product.productNo === (<Product>updatedProduct).productNo; 
  //       })
  //       if(index)
  //         this.fullProductList[index] = updatedProduct; 
        
  //       this.fullProductList = this.fullProductList.slice(); 

  //       return this.fullProductList; 
  //     })
  // }

        // TODO:  This is redudant, but need to do it cause i have two obejct for backend dto and product, i need to fix this.
        editProduct(product: Product) {
          console.log("Product Added", product.description);
          return this.http.post(this.url+'/addProduct', product);
            
            // .map((updatedProduct: any) => {
            //   let index = this.fullProductList.findIndex((product) => {
            //     return product.productNo === (<Product>updatedProduct).productNo; 
            //   })
            //   if(index)
            //     this.fullProductList[index] = updatedProduct; 
              
            //   this.fullProductList = this.fullProductList.slice(); 
      
            //   return this.fullProductList; 
            // })
        }

  addProductInventory(productInventory: ProductInventory[]) {
    console.log("Product Added", productInventory);
    return this.http.post(this.url+'/addProductInventory', productInventory);
  }

  updateProductRetailPrice(product: Product) {

    this.http.post(this.url+'/addProduct', product)
      .subscribe(data => {
        alert('ok');
        console.log(data);
      },
      error => {
        console.log(JSON.stringify(error.json()));
      });
  }

  updateProductInventory(productInventory: ProductInventory[]) {
    return this.http.post(this.url+'/addProductInventory', productInventory);
     
  }



  deleteProduct(deletedProduct: Product) {
    this.http.put(this.url+'/deleteProduct', deletedProduct)
      .subscribe(data => {
        alert('deleted');
        console.log(data);
      },
      error => {
        console.log(JSON.stringify(error.json()));
      });

  }

  deleteProductInventory(deletedInvetory: ProductInventory) {
    this.http.post(this.url+'/deleteProductInventory', deletedInvetory)
      .subscribe(data => {
        alert('deleted');
        console.log(data);
      },
      error => {
        console.log(JSON.stringify(error.json()));
      });
  }

  private extractData(res: Response): Product[] {
    let body = res.json();
    // console.log(body);
    return body || {};
  }

  private handleError(error: Response | any) {
    // In a real world app, you might use a remote logging infrastructure
    let errMsg: string;
    if (error instanceof Response) {
      const body = error.json() || '';
      const err = body.error || JSON.stringify(body);
      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;
    } else {
      errMsg = error.message ? error.message : error.toString();
    }
    console.error(errMsg);
    return Observable.throw(errMsg);
  }
}