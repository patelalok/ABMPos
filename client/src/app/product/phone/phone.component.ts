import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ProductService } from '../product.service';
import { Model, Brand } from 'app/product/product.component';
import { ProductForm } from 'app/product/addProduct.component';
import { Product } from 'app/sell/sale/sale.component';
import * as moment from 'moment';


@Component({
  selector: 'app-phone',
  templateUrl: './phone.component.html',
  styleUrls: ['./phone.component.scss']
})

export class PhoneComponent implements OnInit {
  searchPhoneTextBox:string;
  modelDto: Model[];
  brandDto: Brand[];
  constructor(private formBuilder: FormBuilder, private productService: ProductService) { }

  phoneForm: FormGroup;


  ngOnInit() {
    this.phoneForm = this.formBuilder.group(
      {
        'productNo': [null, [Validators.required, Validators.pattern('^[0-9]+$')]],
        'description': ['', Validators.required],
        'brand': [null, Validators.required]
      }
    );

    this.productService.getModelDetails()
    .subscribe((models: Model[]) => {
      this.modelDto = models;
      console.log('ModelList' + this.modelDto);
    });

    this.productService.getBrandDetails()
    .subscribe((brands: Brand[]) => {
      this.brandDto = brands;
      this.phoneForm.get('brand').setValue(this.brandDto[0]);
      console.log('BrandList' + this.brandDto);
    });
  }


  addPhone() {
    {
      let formValues: ProductForm = this.phoneForm.value;

      let product: Product = {
        productNo: formValues.productNo,
        categoryId: 10,
        brandId: formValues.brand.brandId,
       vendorId: 0,
        modelId: null,
        alternetNo: '',
        cost: formValues.cost,
        retail: formValues.retail,
        date: null,
        description: formValues.description.toUpperCase(),
        discount: null,
        imeiNo: null,
        active: true,
        ecommerce: formValues.ecommerce,
        relatedProduct: formValues.relatedProduct,
        tax: formValues.tax,
        varaint: formValues.varaint,
        markup: formValues.markup,
        minQuantity: formValues.minQuantity,
        quantity: formValues.quantity,
        retailWithDiscount: null,
        returnRule: formValues.returnRule,
        status: null,
        taxAmountOnProduct: null,
        totalProductPrice: null,
        transactionComId: null,
        time: null,
        createdTimestamp: moment(Date.now()).format('YYYY-MM-DD HH:mm:ss'),
        productInventoryDaoList: [],
        operationType: 'Add',
        saleQuantity:null
      }
      this.productService.addProduct(product);
      this.clearProductForm();
    }
  }

  clearProductForm() {
    // this.form.get('productNo').setValue(null);
    // this.form.get('description').setValue(null);
    // this.form.get('cost').setValue(null);
    // this.form.get('markup').setValue(null);
    // this.form.get('retail').setValue(null);
    // this.form.get('quantity').setValue(null);
    this.phoneForm.reset(<ProductForm>{
      // category: this.categoryDto[0],
      brand: this.brandDto[0],
      // vendor: this.vendorDto[0],
      model: this.modelDto[0]
    }); 
  }

  getAutoGeneratedProductNo(): any {
    this.productService.getAutoGeneratedBarcode()
      .subscribe((a: string) => {
        this.phoneForm.get('productNo').setValue(a);
        // console.log('productNo:' + this.generatedProductNo);
      });
  }

}

export class Phone{
  imei: any;
  productNo: any;
  venderId: number;
  venderName: string;
  cost: number;
  retail: number;
  createdTimestamp: any;

}
