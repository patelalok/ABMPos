import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ProductService } from '../product.service';
import { Model, Brand, Vendor } from 'app/product/product.component';
import { ProductForm } from 'app/product/addProduct.component';
import { Product } from 'app/sell/sale/sale.component';
import * as moment from 'moment';
import { ToastsManager } from 'ng2-toastr';


@Component({
  selector: 'app-phone',
  templateUrl: './phone.component.html',
  styleUrls: ['./phone.component.scss']
})

export class PhoneComponent implements OnInit {
  searchPhoneTextBox:string;
  modelDto: Model[];
  brandDto: Brand[];
  vendorDto: Vendor[];
  phoneDto: Product[];
  imeiDto: Phone[];
  selectedPhone: Product;
  selectedImei: Phone;
  newImei: boolean;
  displayDialog: boolean;
  cols: any[];
  phone = new Phone();
  selectedImeiForDelete: Phone;




  constructor(private formBuilder: FormBuilder, private productService: ProductService, private toastr: ToastsManager) { }

  phoneForm: FormGroup;
  imeiForm: FormGroup;


  ngOnInit() {

    this.phoneForm = this.formBuilder.group(
      {
        'productNo': [null, [Validators.required, Validators.pattern('^[0-9]+$')]],
        'description': ['', Validators.required],
        'brand': [null, Validators.required],
        'model': [null, Validators.required]

      }
    );

    this.imeiForm = this.formBuilder.group({
      'imei': [null, [Validators.required, Validators.pattern('^[0-9]+$')]],
      'vendor': ['', Validators.required],
      'cost': [null, Validators.required],
      'retail': [null, Validators.required],
      'color': [null],
      'memory':[null]

    })

  //   this.cols = [
  //     { field: 'imei', header: 'IMEI' },
  //     { field: 'vendorId', header: 'VendorId' },
  //     { field: 'cost', header: 'Cost' },
  //     { field: 'retail', header: 'Retail' }
  // ];

    this.productService.getModelDetails()
    .subscribe((models: Model[]) => {
      this.modelDto = models;
      this.phoneForm.get('model').setValue(this.modelDto[0]);

      console.log('ModelList' + this.modelDto);
    });

    this.productService.getBrandDetails()
    .subscribe((brands: Brand[]) => {
      this.brandDto = brands;
      this.phoneForm.get('brand').setValue(this.brandDto[0]);
      console.log('BrandList' + this.brandDto);
    });

    this.productService.getPhoneDetailsFromBackEnd()
    .subscribe((phone)=>{
      this.phoneDto = phone;
      console.log('Phones' + this.phoneDto);
    })

    this.productService.getVendorDetails()
    .subscribe((vendors: Vendor[]) => {
      this.vendorDto = vendors;
      this.imeiForm.get('vendor').setValue(this.vendorDto[0]);
      console.log('VendorList' + this.vendorDto);
    });

  //  this.getIMEIDetailsByPhone(this.phoneDto[0].productNo);
  }

  getIMEIDetailsByPhone(productNo: string){

    this.productService.getIMEIDetailByPhone(productNo)
    .subscribe((imeis)=>{

        imeis.forEach((imei)=>{
        imei.time = moment(imei.createdTimestamp).format('hh:mm A');
        imei.date = moment(imei.createdTimestamp).format('MM-DD-YYYY');

        // This logic helps to show vendor name all the time from vendor id.
        this.vendorDto.forEach((vendor)=>{
          if(vendor.vendorId == imei.vendorId){
            imei.vendorName = vendor.name;
          }

        })


      })
      this.imeiDto = imeis;
      this.imeiDto = this.imeiDto.slice();
    });
  }


  addPhone() {
    {
      let formValues: ProductForm = this.phoneForm.value;

      let product: Product = {
        productNo: formValues.productNo,
        description: formValues.description.toUpperCase(),
        categoryId: 10,
        brandId: formValues.brand.brandId,
        modelId: formValues.model.modelId,
        alternetNo: '',
        active: true,
        ecommerce: formValues.ecommerce,
        tax: formValues.tax,
        returnRule: formValues.returnRule,
        createdTimestamp: moment(Date.now()).format('YYYY-MM-DD HH:mm:ss'),
        operationType: 'Add',
        color:formValues.color,
        memory: formValues.memory
      }
      this.productService.addProduct(product);
      this.phoneDto.push(product);
      this.phoneDto = this.phoneDto.slice();
      this.hidePhoneModal()
      this.clearProductForm();
    }
  }


  clearProductForm() {
    // this.form.get('productNo').setValue(null);
    // this.form.get('description').setValue(null);
    // this.form.get('cost').setValue(null);
    // this.form.get('markup').setValue(null);
    // this.form.get('retail').setValue(null);
    // this.form.get('quantity').setValue(null);
    this.phoneForm.reset(<ProductForm>{
      // category: this.categoryDto[0],
      brand: this.brandDto[0],
      // vendor: this.vendorDto[0],
      model: this.modelDto[0]
    }); 
  }

  getAutoGeneratedProductNo(): any {
    this.productService.getAutoGeneratedBarcode()
      .subscribe((a: string) => {
        this.phoneForm.get('productNo').setValue(a);
        // console.log('productNo:' + this.generatedProductNo);
      });
  }

  addIMEI(){

    let newIMEI = new Phone();

    newIMEI.imei = this.imeiForm.get('imei').value;
    newIMEI.productNo =this.selectedPhone.productNo
    newIMEI.cost = this.imeiForm.get('cost').value;
    newIMEI.retail = this.imeiForm.get('retail').value;

    let tempVendor: Vendor = this.imeiForm.get('vendor').value;
    newIMEI.vendorId = tempVendor.vendorId;
    newIMEI.vendorName = tempVendor.name;
    newIMEI.createdTimestamp = moment(Date.now()).format('YYYY-MM-DD HH:mm:ss');
    newIMEI.sold = false;

    console.log('phone before add', newIMEI);
    if(this.imeiForm.valid){

      let imeiExsits: boolean;
      // Now Need to check if this IMEI alredy exists or not,
      for(let a = 0; a < this.imeiDto.length; a ++ ){

        if(this.imeiDto[a].imei == newIMEI.imei){
          imeiExsits = true;
         alert('This IMEI Alredy Exists!!');
        }
      }

      if(!imeiExsits)
{
      this.productService.addIMEIForPhone(newIMEI)
      .subscribe(data => {
        console.log('response', data);
        if(data.status == 200 || data.status == 201){
          this.toastr.success('Phone Added Successfully!!', 'Success!');
          this.imeiDto.push(newIMEI);
          this.imeiDto =  this.imeiDto.slice();
          this.imeiForm.get('imei').setValue('');
          }
      },
        error => {
          this.toastr.error('Opps something goes wrong!!', 'Error!');
          console.log(JSON.stringify(error.json()));
    });
  }
}
  
    else {
      alert("Please add required feilds");
    }
  }

  updateImeiDetails(event){
    console.log('update imei', event.data)  

    event.data.productNo = this.selectedPhone.productNo;
    this.productService.addIMEIForPhone(event.data)
    .subscribe(data => {
      if(data.status == 200 || data.status == 201){
        this.toastr.success('Phone Updated Successfully!!', 'Success!');
        this.imeiDto =  this.imeiDto.slice();
        }
    },
      error => {
        this.toastr.error('Opps something goes wrong!!', 'Error!');
        console.log(JSON.stringify(error.json()));
  });
  }

  setPhone(phone: Product){
    this.selectedPhone = phone;
    this.getIMEIDetailsByPhone(this.selectedPhone.productNo);
    console.log('phone', phone);
  }

  hidePhoneModal() {
    console.log('Hiding modal');
    $('#addPhone').modal('hide');
  }

  setImeiToDelete(imei: Phone){
    this.selectedImeiForDelete = imei;
  }
  deleteImei(){
    this.productService.deleteImeiForPhone(this.selectedImeiForDelete.imei)
    .subscribe(data => {
      if(data.status == 200 || data.status == 201){
        this.toastr.success('Imei Deleted Successfully!!', 'Success!');

        let index = this.imeiDto.indexOf(this.selectedImeiForDelete, 0);
        if(index > -1){
          this.imeiDto.splice(index, 1);
          this.imeiDto =  this.imeiDto.slice();
        }
        }
    },
      error => {
        this.toastr.error('Opps something goes wrong!!', 'Error!');
        console.log(JSON.stringify(error.json()));
  });

  }

//   onRowSelect(event) {
//     this.newImei = false;
//     this.phone = this.cloneImei(event.data);
//     this.displayDialog = true;
// }
// cloneImei(c: Phone): Phone {
//   let phone = new Phone;
//   for (let prop in c) {
//     phone[prop] = c[prop];
//   }
//   return phone;
// }

}

export class Phone {
  imei: any;
  productNo: any;
  vendorId: number;
  vendorName: string;
  color:string;
  memory: string;
  cost: number;
  retail: number;
  createdTimestamp: any;
  sold:boolean;
  date:any;
  time:any;

}
